// Copyright 2018 Bitwise IO, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

syntax = "proto3";

enum PbftMessageType {
  PRE_PREPARE = 0;
  PREPARE = 1;
  COMMIT = 2;
  COMMIT_FINAL = 3;
}

// A consensus-specific message relating to PBFT
message PbftMessage {
  // The type of message (PrePrepare, Prepare, Commit, CommitFinal)
  PbftMessageType type = 1;

  uint64 view = 2;
  uint64 sequence_number = 3;
  ConsensusBlock block = 4;
  bytes signer_id = 5;
}


// View change message, for when a node suspects the primary node is faulty
message PbftViewChange {
  // New view number
  uint64 view = 1;

  // Sequence number of last known stable checkpoint
  uint64 stable_checkpoint = 2;

  // Set of `2f + 1` checkpoint messages, proving correctness of stable
  // checkpoint mentioned in `sequence_number`
  repeated Checkpoint checkpoint_messages = 3;

  message PrepareMessagePair {
    PbftMessage prepare_message = 1;

    repeated PbftMessageType prepare_messages = 2;
  }

  // `PrePrepare` message and `2f` `Prepare` messages for each `BlockNew`
  // message with a sequence number greater than `sequence_number`
  PrepareMessagePair prepare_messages = 4;

  // Node that initiated the view change
  bytes node_id = 5;
}


// New view message, for when there is consensus that the primary is faulty
message PbftNewView {
    // New view number
    uint64 view = 1;

    // Valid `ViewChange` messages received by new primary and the original
    // `ViewChange` message sent by the new primary
    repeated PbftViewChange view_change_messages = 2;

    // New set of `PrePrepare` messages for every sequence number in between
    // the last stable checkpoint in `view_change_messages` and the highest
    // sequence number in `view_change_messages`.
    repeated PbftMessage pre_prepare_messages = 3;
}


// Checkpoint message, used for garbage collection
message Checkpoint {
  // Sequence number of last completed request
  uint64 sequence_number = 1;

  // Digest of the node's state
  bytes state_digest = 2;
}

// All information about a block that is relevant to consensus
message ConsensusBlock {
  bytes block_id = 1;
  bytes previous_id = 2;
  // The id of peer that signed this block
  bytes signer_id = 3;
  uint64 block_num = 4;
  bytes payload = 5;
}
