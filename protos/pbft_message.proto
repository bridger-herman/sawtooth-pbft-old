// Copyright 2018 Bitwise IO, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

syntax = "proto3";

// PBFT-specific block information (don't need to keep sending the whole payload
// around the network)
message PbftBlock {
  bytes block_id = 1;

  bytes signer_id = 2;

  uint64 block_num = 3;

  bytes summary = 4;
}

// Represents all common information used in a PBFT message
message PbftMessageInfo {
  // Type of the message
  string msg_type = 1;

  // View number
  uint64 view = 2;

  // Sequence number (helps with ordering log)
  uint64 seq_num = 3;

  // Node who signed the message
  bytes signer_id = 4;
}


// A generic PBFT message (PrePrepare, Prepare, Commit, CommitFinal,
// Checkpoint)
message PbftMessage {
  // Message information
  PbftMessageInfo info = 1;

  // The actual message
  PbftBlock block = 2;
}


// View change message, for when a node suspects the primary node is faulty
message PbftViewChange {
  // Message information
  PbftMessageInfo info = 1;

  // Set of `2f + 1` checkpoint messages, proving correctness of stable
  // checkpoint mentioned in info's `sequence_number`
  repeated PbftMessage checkpoint_messages = 2;

  // `PrePrepare` messages with a sequence numbers greater than
  // the last stable checkpoint.
  // Used to help construct `PbftNewView`
  repeated PbftMessage pre_prepare_messages = 3;
}


// New view message, for when there is consensus that the primary is faulty
message PbftNewView {
  // Message information
  PbftMessageInfo info = 1;

  // Valid `ViewChange` messages received by new primary and the original
  // `ViewChange` message sent by the new primary
  repeated PbftViewChange view_change_messages = 2;

  // New set of `PrePrepare` messages for every sequence number in between
  // the last stable checkpoint in `view_change_messages` and the highest
  // sequence number in `view_change_messages`.
  repeated PbftMessage pre_prepare_messages = 3;
}

